<?php

namespace App\Models;

use App\Traits\Auditable;
use App\Traits\HasUuid;
use Cviebrock\EloquentSluggable\Sluggable;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\Storage;
use Venturecraft\Revisionable\RevisionableTrait;

class Office extends Model
{
    use HasFactory;
    use Sluggable;
    use Auditable;
    use SoftDeletes;

    protected $fillable = [
        'name',
        'slug',
        'email',
        'contact_numbers',
        'office_head_name',
        'office_head_position',
        'operating_unit_id',
        'logo',
    ];

    protected $hidden = [
        'slug',
        'description',
        'email',
        'contact_numbers',
        'office_head_name',
        'office_head_position',
        'created_at',
        'updated_at',
        'deleted_at',
    ];

    /**
     * Return value when calling revisionable
     *
     * @return mixed
     */
    public function identifiableName()
    {
        return $this->name;
    }

    public function operating_unit(): BelongsTo
    {
        return $this->belongsTo(OperatingUnit::class);
    }

    public function getRouteKeyName()
    {
        return 'slug'; // TODO: Change the autogenerated stub
    }

    public function getImageAttribute()
    {
        if ($this->logo) {
            return Storage::url($this->logo);
        }
        return 'https://avatars.githubusercontent.com/u/86537749?s=200&amp;v=4';
    }

    public function users()
    {
        return $this->hasMany(User::class);
    }

    public function projects()
    {
        return $this->hasMany(Project::class);
    }

    /**
     * @return array
     */
    public function sluggable(): array
    {
        return [
            'slug' => [
                'source' => 'name'
            ]
        ];
    }
}
